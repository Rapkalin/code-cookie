/*
	The config file for the plugin
 */
const { registerBlockType } = wp.blocks
/* To use translation in admin -> const { __ } = wp.i18n */

/*
* Include module for the register block
* Don't forget to also add the needed module in the info-bulle-block.php file
*/
const { useBlockProps, RichText, InspectorControls } = wp.blockEditor
const { MenuGroup, MenuItemsChoice } = wp.components

registerBlockType('info-bulle-block/info-bulle-block', {
	/* The plugin title in the admin */
	title: "Info bulle",
	category: "widgets",
	/* What the plugin supports */
	supports: {
		html: false
	},
	/* Specify what html code will be generated in the admin
	* className var is automatically generated by Wordpress
	*/
	edit ({ className, attributes, setAttributes }) {
		const choices = [
			{
				value: 'information',
				label: 'Information',
			},
			{
				value: 'warning',
				label: 'Warning',
			},
			{
				value: 'see-also',
				label: 'See also',
			},
		];
		const style = {
			'background-color': attributes.backgroundColor,
		};

		className += ' info-bulle-component icon-' + attributes.bulleMode;

		return <div className={ className } style={style}>
			<InspectorControls>
				<MenuGroup label="Predefine settings" className="info-bulle-inspector">
					<MenuItemsChoice
						choices={ choices }
						value={ attributes.bulleMode }
						onSelect={
							( newMode ) => setAttributes({backgroundColor: setBackgroundColor(newMode), bulleMode: newMode} )
						}
					/>
				</MenuGroup>
			</InspectorControls>

			<RichText
				placeholder={ 'Placeholder' } // Display this text before any content has been added by the user
				// allowedFormats={ [ 'core/bold', 'core/italic', 'core/link' ] } // Allow the content to be made bold or italic, but do not allow other formatting options
				onChange={ ( content ) => setAttributes( { content } ) } // Store updated content as a block attribute
				value={ attributes.content }
			/>
		</div>

	},

	/* Specify what html code will be generated in front end
	* if we want to make a dynamic block, leave the return to null
	*/
	save () {
		return null
	}
})

function setBackgroundColor(newMode)
{
	if (typeof newMode === 'string' || newMode instanceof String) {
		console.log('inside: ', newMode)
		switch (newMode) {
			case "information":
				return'#E6F4FA';
			case "warning":
				return '#FDEFE1';
			case "see-also":
				return '#2E3844';
		}
	}
}
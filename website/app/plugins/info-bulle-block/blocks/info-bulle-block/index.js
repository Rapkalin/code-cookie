/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./blocks/info-bulle-block/index.jsx":
/*!*******************************************!*\
  !*** ./blocks/info-bulle-block/index.jsx ***!
  \*******************************************/
/***/ (() => {

eval("/*\n\tThe config file for the plugin\n */\nvar registerBlockType = wp.blocks.registerBlockType;\n/* To use translation in admin -> const { __ } = wp.i18n */\n\n/*\n* Include module for the register block\n* Don't forget to also add the needed module in the info-bulle-block.php file\n*/\nvar _wp$blockEditor = wp.blockEditor,\n  InnerBlocks = _wp$blockEditor.InnerBlocks,\n  useBlockProps = _wp$blockEditor.useBlockProps,\n  RichText = _wp$blockEditor.RichText,\n  InspectorControls = _wp$blockEditor.InspectorControls;\nvar _wp$components = wp.components,\n  MenuGroup = _wp$components.MenuGroup,\n  MenuItemsChoice = _wp$components.MenuItemsChoice;\nvar InnerBlocksDiv = wp.element.createElement(InnerBlocks, null);\nregisterBlockType('info-bulle-block/info-bulle-block', {\n  /* The plugin title in the admin */\n  title: \"Info bulle\",\n  category: \"widgets\",\n  /* What the plugin supports */\n  supports: {\n    html: false\n  },\n  /* Specify what html code will be generated in the admin\n  * className var is automatically generated by Wordpress\n  */\n  edit: function edit(_ref) {\n    var _attributes$content;\n    var className = _ref.className,\n      attributes = _ref.attributes,\n      setAttributes = _ref.setAttributes;\n    var choices = [{\n      value: 'information',\n      label: 'Information'\n    }, {\n      value: 'warning',\n      label: 'Warning'\n    }, {\n      value: 'alert',\n      label: 'Alert'\n    }, {\n      value: 'see-also',\n      label: 'See also'\n    }];\n    var style = {\n      'background-color': attributes.backgroundColor\n    };\n    className += ' info-bulle-component-back icon-' + attributes.bulleMode + '-back';\n    var readAlso = attributes.bulleMode === 'see-also' && (attributes.content === '' || attributes.content === undefined) ? \"<span class=\\\"disable-read-also-span-back\\\">Lire aussi : </span>\" : '';\n    return wp.element.createElement(\"div\", {\n      className: className,\n      style: style\n    }, wp.element.createElement(InspectorControls, null, wp.element.createElement(MenuGroup, {\n      label: \"Predefine settings\",\n      className: \"info-bulle-inspector\"\n    }, wp.element.createElement(MenuItemsChoice, {\n      choices: choices,\n      value: attributes.bulleMode,\n      onSelect: function onSelect(newMode) {\n        return setAttributes({\n          backgroundColor: setBackgroundColor(newMode),\n          bulleMode: newMode\n        });\n      }\n    }))), wp.element.createElement(InnerBlocks, null), wp.element.createElement(RichText, {\n      placeholder: 'Votre texte...' // Display this text before any content has been added by the user\n      // allowedFormats={ [ 'core/bold', 'core/italic', 'core/link' ] } // Allow the content to be made bold or italic, but do not allow other formatting options\n      ,\n      onChange: function onChange(content) {\n        return setAttributes({\n          content: content\n        });\n      } // Store updated content as a block attribute\n      ,\n      value: readAlso + ((_attributes$content = attributes.content) !== null && _attributes$content !== void 0 ? _attributes$content : '')\n    }));\n  },\n  /* Specify what html code will be generated in front end\n  * if we want to make a dynamic block, leave the return to null\n  */\n  save: function save() {\n    return null;\n  }\n});\nfunction setBackgroundColor(newMode) {\n  if (typeof newMode === 'string' || newMode instanceof String) {\n    console.log('inside: ', newMode);\n    switch (newMode) {\n      case \"information\":\n        return '#E6F4FA';\n      case \"warning\":\n        return '#ffe1c4';\n      case \"alert\":\n        return '#ffc9d0';\n      case \"see-also\":\n        return '#2E3844';\n    }\n  }\n}\n\n//# sourceURL=webpack:///./blocks/info-bulle-block/index.jsx?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./blocks/info-bulle-block/index.jsx"]();
/******/ 	
/******/ })()
;